plugins {
    id 'fabric-loom' version "${loom_version}"
    id 'maven-publish'
    id 'idea'
}

version = mod_version
group = maven_group

base {
    archivesName = "${rootProject.archives_name}-fabric"
}

repositories {
    maven {
        name = 'TerraformersMC'
        url = 'https://maven.terraformersmc.com/'
    }
}

// Fabric Loom 配置
loom {
    runs {
        client {
            client()
            configName = "Fabric Client"
            ideConfigGenerated(true)
            runDir = "run/client"
        }

        server {
            server()
            configName = "Fabric Server"
            ideConfigGenerated(true)
            runDir = "run/server"
            programArgs '--nogui'
        }

        // 数据生成配置 - 输出到通用模块（为双平台生成数据）
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("../common/src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=${mod_id}"
            runDir "build/datagen"
        }
    }

    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }

    mixin {
        defaultRefmapName = "${mod_id}.refmap.json"
    }
}

// 源集配置 - 包含通用生成数据
sourceSets {
    main {
        resources {
            srcDirs += ['../common/src/generated/resources']
        }
    }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings "net.fabricmc:yarn:${rootProject.yarn_mappings}:v2"

    // Fabric
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    // Common 模块
    implementation project(":common")
}

// 资源处理
processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand(
                'version': rootProject.version,
                'mod_id': rootProject.mod_id,
                'mod_name': rootProject.mod_name,
                'mod_license': rootProject.mod_license,
                'mod_authors': rootProject.mod_authors,
                'mod_description': rootProject.mod_description,
                'minecraft_version': rootProject.minecraft_version,
                'loader_version': rootProject.fabric_loader_version
        )
    }
}

// Java 配置
java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

tasks.named('compileJava') {
    dependsOn(':common:compileJava')
}

// === 数据生成任务 ===

tasks.register('generateData') {
    group = 'fabric'
    description = 'Runs the Fabric data generator (for both platforms)'

    dependsOn 'runDatagenClient'

    doFirst {
        println "♻️ 开始 Fabric 数据生成（为双平台生成数据）..."
        println "📁 输出目录: ${file("../common/src/generated/resources")}"
    }

    doLast {
        def generatedDir = file("../common/src/generated/resources")
        if (generatedDir.exists()) {
            def fileCount = 0
            def dirCount = 0

            generatedDir.eachFileRecurse { file ->
                if (file.isFile()) {
                    fileCount++
                } else if (file.isDirectory() && file != generatedDir) {
                    dirCount++
                }
            }

            println "✅ Fabric 数据生成完成！"
            println "📊 生成文件数: ${fileCount}"
            println "📁 生成目录数: ${dirCount}"
            println "📂 输出目录: ${generatedDir}"

            // 显示文件类型统计
            if (fileCount > 0) {
                def fileTypes = [:]
                generatedDir.eachFileRecurse { file ->
                    if (file.isFile()) {
                        def ext = file.name.substring(file.name.lastIndexOf('.') + 1)
                        fileTypes[ext] = (fileTypes[ext] ?: 0) + 1
                    }
                }

                println "📄 生成的文件类型:"
                fileTypes.each { ext, count ->
                    println "   ${ext.toUpperCase()}: ${count} 个"
                }

                // 显示顶级目录结构
                println "📁 目录结构:"
                generatedDir.eachDir { dir ->
                    def subFiles = []
                    dir.eachFileRecurse { file -> if (file.isFile()) subFiles << file }
                    println "   📂 ${dir.name}/ (${subFiles.size()} 个文件)"
                }
            }
        } else {
            println "⚠️ 警告: 数据生成目录不存在，可能生成失败"
        }
    }
}

tasks.register('cleanGeneratedData', Delete) {
    group = 'fabric'
    description = 'Cleans generated data files'

    delete file("../common/src/generated/resources")

    doLast {
        println "✅ 已清理 Fabric 生成的数据"
    }
}

// 创建数据生成目录的任务
tasks.register('createDataGenDirs') {
    doLast {
        def commonGenDir = file("../common/src/generated/resources")

        if (!commonGenDir.exists()) {
            commonGenDir.mkdirs()
            println "✅ 创建通用数据生成目录: ${commonGenDir}"
        }
    }
}

// 数据生成前创建目录
tasks.named('runDatagenClient') {
    dependsOn 'createDataGenDirs'
}

// 清理任务
tasks.named('clean') {
    dependsOn 'cleanGeneratedData'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = base.archivesName.get()
            from components.java
        }
    }
}

// IDE 配置
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
        generatedSourceDirs += file('../common/src/generated/resources')
    }
}