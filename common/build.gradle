plugins {
    id 'java-library'
    id 'maven-publish'
}

base {
    archivesName = "${rootProject.archives_name}-common"
}

// 添加生成资源目录（Fabric 数据生成输出到这里）
sourceSets.main.resources {
    srcDir 'src/generated/resources'
}

dependencies {
    // 跨平台兼容依赖
    compileOnly "org.slf4j:slf4j-api:2.0.9"

    // NeoForge 依赖（用于编译时）
    compileOnly "net.neoforged:neoforge:${rootProject.neo_version}"
}

// 处理资源文件
processResources {
    inputs.property "version", project.version

    filesMatching(['*.json', '*.toml']) {
        expand(
                'version': rootProject.version,
                'mod_id': rootProject.mod_id,
                'mod_name': rootProject.mod_name,
                'mod_license': rootProject.mod_license,
                'mod_authors': rootProject.mod_authors,
                'mod_description': rootProject.mod_description,
                'minecraft_version': rootProject.minecraft_version
        )
    }

    // 包含通用配置文件
    include "${rootProject.mod_id}.mixins.json"
}

// 确保生成目录在清理时也被清理
tasks.register('cleanGeneratedData', Delete) {
    delete 'src/generated/resources'

    doLast {
        println "✅ 已清理 Common 生成数据"
    }
}

tasks.named('clean') {
    dependsOn 'cleanGeneratedData'
}

// 源码 JAR
tasks.register('commonSourcesJar', Jar) {
    dependsOn classes
    archiveBaseName = "${rootProject.archives_name}-common"
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

publishing {
    publications {
        mavenCommon(MavenPublication) {
            artifactId = "${rootProject.archives_name}-common"
            from components.java
            artifact commonSourcesJar
        }
    }
}

// IDE 配置
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
        generatedSourceDirs += file('src/generated/resources')
    }
}