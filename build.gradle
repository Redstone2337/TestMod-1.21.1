import java.text.SimpleDateFormat

plugins {
    id 'java'
    id 'maven-publish'
    id 'idea'
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version

    repositories {
        mavenCentral()
        maven {
            name = 'Fabric'
            url = 'https://maven.fabricmc.net/'
        }
        maven {
            name = 'NeoForge'
            url = 'https://maven.neoforged.net/releases'
        }
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'

    java {
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 21
        it.options.encoding = 'UTF-8'
    }

    idea {
        module {
            downloadSources = true
            downloadJavadoc = true
        }
    }
}

// === 数据生成任务 ===

tasks.register('generateData') {
    group = 'data generation'
    description = 'Run data generation using Fabric (for both platforms)'

    dependsOn ':fabric:generateData'

    doFirst {
        println "♻️ 开始使用 Fabric 生成数据（适用于双平台）..."
    }

    doLast {
        println "✅ Fabric 数据生成完成！"

        // 检查通用生成目录
        def commonDataDir = project(':common').file('src/generated/resources')
        println "📁 通用数据位置: ${commonDataDir}"

        // 统计生成的文件
        if (commonDataDir.exists()) {
            def fileCount = 0
            def dirCount = 0

            commonDataDir.eachFileRecurse { file ->
                if (file.isFile()) {
                    fileCount++
                } else if (file.isDirectory() && file != commonDataDir) {
                    dirCount++
                }
            }

            println "📊 总生成文件数: ${fileCount}"
            println "📁 总生成目录数: ${dirCount}"

            // 显示文件类型统计
            if (fileCount > 0) {
                def fileTypes = [:]
                commonDataDir.eachFileRecurse { file ->
                    if (file.isFile()) {
                        def ext = file.name.substring(file.name.lastIndexOf('.') + 1)
                        fileTypes[ext] = (fileTypes[ext] ?: 0) + 1
                    }
                }

                println "📄 文件类型统计:"
                fileTypes.each { ext, count ->
                    println "   ${ext.toUpperCase()}: ${count} 个"
                }

                // 显示顶级目录结构
                println "📁 目录结构:"
                commonDataDir.eachDir { dir ->
                    def subFiles = []
                    dir.eachFileRecurse { file -> if (file.isFile()) subFiles << file }
                    println "   📂 ${dir.name}/ (${subFiles.size()} 个文件)"
                }
            }
        } else {
            println "⚠️ 警告: 通用数据目录不存在"
        }
    }
}

tasks.register('cleanGeneratedData') {
    group = 'data generation'
    description = 'Clean all generated data'

    dependsOn ':common:cleanGeneratedData'

    doLast {
        println "✅ 已清理所有生成数据"
    }
}

// === 通用构建任务 ===

afterEvaluate {
    // 通用模组 JAR（包含双端实现）
    tasks.register('buildUniversalJar', Jar) {
        archiveBaseName = "${rootProject.archives_name}"
        archiveVersion = rootProject.mod_version
        archiveClassifier = 'universal'
        destinationDirectory = layout.buildDirectory.dir('libs')

        // 依赖关系 - 只使用 Fabric 数据生成
        dependsOn ':fabric:build', ':neoforge:build', ':common:build', 'generateData'

        def fabricJarProvider = project(':fabric').tasks.named('remapJar').flatMap { it.archiveFile }
        def neoForgeJarProvider = project(':neoforge').tasks.named('jar').flatMap { it.archiveFile }
        def commonResourcesDir = project(':common').sourceSets.main.resources.srcDirs[0]

        // 包含通用模块生成的数据（由 Fabric 生成）
        from(project(':common').file('src/generated/resources')) {
            into 'assets'
            include '**/*'
        }

        // Fabric JAR 内容
        from(fabricJarProvider.map { zipTree(it) }) {
            exclude "${rootProject.mod_id}.mixins.json"
        }

        // NeoForge JAR 内容
        from(neoForgeJarProvider.map { zipTree(it) }) {
            exclude "${rootProject.mod_id}.mixins.json"
        }

        // Common 资源
        from(commonResourcesDir) {
            include "${rootProject.mod_id}.mixins.json"
            exclude 'fabric.mod.json'
            exclude 'META-INF/mods.toml'
            exclude 'META-INF/neoforge.mods.toml'
        }

        duplicatesStrategy = DuplicatesStrategy.INCLUDE

        doFirst {
            println "♻️ 开始构建通用模组 JAR..."
            println "📦 包含: Fabric + NeoForge + Common + Fabric生成的数据"
            println "📁 数据来源: Fabric 数据生成 -> 通用模块"
        }

        doLast {
            def jarFile = archiveFile.get().asFile
            def jarContents = zipTree(jarFile).files.name

            println "✅ 通用模组 JAR 构建完成: ${jarFile.name}"
            println "📦 文件大小: ${String.format("%.2f", jarFile.length() / 1024.0 / 1024.0)} MB"

            // 验证内容
            def hasFabricManifest = jarContents.contains('fabric.mod.json')
            def hasNeoForgeManifest = jarContents.contains('META-INF/neoforge.mods.toml')
            def hasMixins = jarContents.contains("${rootProject.mod_id}.mixins.json")
            def assetCount = jarContents.count { it.startsWith('assets/') }
            def dataCount = jarContents.count { it.startsWith('data/') }

            println "🔍 JAR 内容验证:"
            println "   ✅ Fabric 清单: ${hasFabricManifest}"
            println "   ✅ NeoForge 清单: ${hasNeoForgeManifest}"
            println "   ✅ Mixins 配置: ${hasMixins}"
            println "   📁 资源文件: ${assetCount} 个"
            println "   📁 数据文件: ${dataCount} 个"

            // 检查生成的数据
            def generatedAssets = jarContents.findAll {
                it.startsWith('assets/') &&
                        (it.contains('/lang/') || it.contains('/models/') || it.contains('/textures/') || it.contains('/blockstates/'))
            }
            println "   🎨 生成资源: ${generatedAssets.size()} 个"

            if (generatedAssets.size() > 0) {
                println "   📄 生成资源示例:"
                generatedAssets.take(5).each { file ->
                    println "     - ${file}"
                }
            }
        }

        manifest {
            attributes(
                    'Multi-Release': 'true',
                    'Built-By': System.getProperty('user.name'),
                    'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                    'Created-By': "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')} ${System.getProperty('java.vm.version')})",
                    'Build-OS': "${System.getProperty('os.name')} ${System.getProperty('os.arch')} ${System.getProperty('os.version')}"
            )
        }
    }

    // 通用源码 JAR
    tasks.register('buildUniversalSourceJar', Jar) {
        archiveBaseName = "${rootProject.archives_name}"
        archiveVersion = rootProject.mod_version
        archiveClassifier = 'universal-sources'
        destinationDirectory = layout.buildDirectory.dir('libs')

        dependsOn ':fabric:sourcesJar', ':neoforge:sourcesJar', ':common:sourcesJar'

        def fabricSourceJarProvider = project(':fabric').tasks.named('sourcesJar').flatMap { it.archiveFile }
        def neoForgeSourceJarProvider = project(':neoforge').tasks.named('sourcesJar').flatMap { it.archiveFile }
        def commonSourceJarProvider = project(':common').tasks.named('sourcesJar').flatMap { it.archiveFile }

        from(fabricSourceJarProvider.map { zipTree(it) })
        from(neoForgeSourceJarProvider.map { zipTree(it) })
        from(commonSourceJarProvider.map { zipTree(it) })

        duplicatesStrategy = DuplicatesStrategy.INCLUDE

        doLast {
            println "✅ 通用源码 JAR 构建完成"
        }
    }

    // 发布任务
    tasks.register('release') {
        group = 'distribution'
        description = 'Build all distribution artifacts'

        dependsOn buildUniversalJar, buildUniversalSourceJar

        doLast {
            def libsDir = layout.buildDirectory.dir('libs').get().asFile
            println "🎉 所有发布构件构建完成！"
            println "📦 位置: ${libsDir}"

            libsDir.listFiles({ file -> file.name.endsWith('.jar') } as FileFilter)?.each { file ->
                def sizeMB = String.format("%.2f", file.length() / 1024.0 / 1024.0)
                println "   📄 ${file.name} (${sizeMB} MB)"
            }
        }
    }
}

// === 项目管理任务 ===

tasks.register('buildAll') {
    group = 'build'
    description = 'Build all subprojects and create universal jars'

    dependsOn 'fabric:build', 'neoforge:build', 'common:build', 'buildUniversalJar', 'buildUniversalSourceJar'

    doLast {
        println "✅ 所有模块构建完成"

        def libsDir = layout.buildDirectory.dir('libs').get().asFile
        def jars = libsDir.listFiles({ file -> file.name.endsWith('.jar') } as FileFilter)

        println "📦 生成的 JAR 文件:"
        jars?.each { file ->
            def sizeMB = String.format("%.2f", file.length() / 1024.0 / 1024.0)
            println "   📄 ${file.name} (${sizeMB} MB)"
        }
    }
}

tasks.register('projectInfo') {
    group = 'help'
    description = 'Display project information'

    doLast {
        println """
🎯 项目信息:
   名称: ${rootProject.name}
   组: ${rootProject.maven_group}
   版本: ${rootProject.mod_version}
   Minecraft: ${rootProject.minecraft_version}

🛠️ 可用任务:
   📊 generateData       - 使用 Fabric 生成数据（双平台共享）
   📦 buildUniversalJar  - 构建通用模组 JAR
   🚀 release            - 构建所有发布构件
   🔨 buildAll           - 构建所有模块
   🧹 cleanGeneratedData - 清理生成的数据

💡 快速开始:
   ./gradlew generateData       # 生成数据（Fabric）
   ./gradlew buildUniversalJar  # 构建通用 JAR
   ./gradlew release            # 完整发布

📝 注意:
   当前使用 Fabric 数据生成器为双平台生成数据
   NeoForge 数据生成已禁用
        """
    }
}

// 配置默认任务
defaultTasks 'projectInfo'